<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>栈</title>
      <link href="/2019/08/27/%E6%A0%88/"/>
      <url>/2019/08/27/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>栈就像一个乒乓球盒子，我们只能从其中的一个口放和取，而最后放进去的乒乓球总会是第一个被取出，这就是栈的最显著的特点：<strong>后进先出</strong>。</p><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/1566915182316.png" alt="1566915182316"></p><a id="more"></a><h2 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h2><blockquote><ul><li>后进先出(Last In First Out)</li><li>有序列表</li><li>限制插入和删除只能在<strong>一端执行</strong> , 允许插入的一端称为<strong>栈顶</strong>, 另一端固定的称为<strong>栈底</strong></li><li>最先放入栈的元素存在于<strong>栈底</strong> , 最后放入的元素存在于<strong>栈顶</strong> , 而<strong>删除元素正好相反</strong></li></ul></blockquote><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/1566913946943.png" alt="1566913946943"></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>数组</p><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/1566913971716.png" alt="1566913971716"></p><p>其中top是栈顶指针，也就是数组最后一个元素的下标。</p></li><li><p>链表</p><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/1566914577849.png" alt="1566914577849"></p></li></ol><h2 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h2><blockquote><ul><li>入栈操作(push)</li><li>出栈操作(pop)</li></ul></blockquote><ul><li>数组栈元素入栈过程</li></ul><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/%E6%95%B0%E7%BB%84%E5%85%A5%E6%A0%88.png" alt="数组入栈"></p><blockquote><p>将栈顶元素对应的下标+1，并将元素放入当前位置</p></blockquote><ul><li>数组栈元素出栈过程</li></ul><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/%E6%95%B0%E7%BB%84%E5%87%BA%E6%A0%88.png" alt="数组出栈"></p><blockquote><p>将栈顶元素对应的下标-1</p></blockquote><ul><li>链表栈元素入栈过程</li></ul><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/%E9%93%BE%E8%A1%A8%E5%85%A5%E6%A0%88.png" alt="链表入栈"></p><blockquote><ol><li>将链表最后一个节点的next指针域指向待放入栈的元素</li><li>将新的节点的prev指针域指向当前的top指针指向的节点</li><li>将top指针指向新的元素</li></ol></blockquote><ul><li>链表栈元素出栈过程</li></ul><p><img src="//smallpineapp1e.github.io/2019/08/27/栈/%E9%93%BE%E8%A1%A8%E5%87%BA%E6%A0%88.png" alt="数组出栈"></p><blockquote><ol><li>将链表的尾节点的前一个节点的next指针域指向null</li><li>将top指针(表尾指针)指向倒数第二个节点(通过尾节点的prev指针域)</li><li>将原尾节点的prev域指向空，值清空</li></ol></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>了解了栈的实现方式和基本操作的过程以及栈的特点以后，我们可以用它来应付在生活中的问题，接下来为大家讲解一道比较经典的关于使用栈这种数据结构的题目。</p><h2 id="题目描述（leetcode-682）"><a href="#题目描述（leetcode-682）" class="headerlink" title="题目描述（leetcode-682）:"></a>题目描述（leetcode-682）:</h2><p>你现在是棒球比赛记录员。</p><p>给定一个字符串列表，每个字符串可以是以下四种类型之一：</p><blockquote><ol><li><p>整数（一轮的得分）：直接表示您在本轮中获得的积分数。</p></li><li><p>“+”（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。</p></li><li><p>“D”（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。</p></li><li><p>“C”（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。</p></li></ol><p>每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。</p><p>你需要返回你在所有回合中得分的总和。</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>输入：[“5”,”2”,”C”,”D”,”+”]<br>        输出：30</p><blockquote><p>第1轮：你可以得到5分。总和是：5。</p><p>第2轮：你可以得到2分。总和是：7。</p><p>操作1：第2轮的数据无效。总和是：5。</p><p>第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。</p><p>第4轮：你可以得到5 + 10 = 15分。总数是：30。</p></blockquote><p><strong>前提要求：</strong></p><ul><li>输入列表的大小将介于1和1000之间。</li><li>列表中的每个整数都将介于-30000和30000之间。</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><ol><li>首先输入一个数组 , 如果不满足前提要求则直接返回0 , 如果满足 , 则继续进行判断</li><li>用一个栈去表示数组中每一个位置的分数 , 如果遇到字母”D”, 则访问栈顶元素并乘2后放入栈中 , <strong>注意原来的元素没有弹栈!</strong></li><li>如果遇到”+”时则访问<strong>(注意是访问而没有弹栈)</strong>栈的最上2个元素进行加操作后再放入栈顶 , 只有在遇到字母 “C”时, 则弹出栈顶元素 , 最后对栈内所有元素进行求和.</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; numStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPoints</span><span class="params">(String[] ops)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断长度是否超出题目要求</span></span><br><span class="line">        <span class="keyword">if</span>(ops.length &gt; <span class="number">1000</span> || ops.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=ops.length-<span class="number">1</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> number = Integer.parseInt(ops[i]);</span><br><span class="line">                <span class="comment">//判断数字大小是否超出题目要求</span></span><br><span class="line">                <span class="keyword">if</span>(number &gt; <span class="number">30000</span> || number &lt; -<span class="number">30000</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    numStack.push(number);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">                <span class="comment">//栈判空, 若为空, 则此次操作没有任何意义</span></span><br><span class="line">                <span class="keyword">if</span>(numStack.empty())&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//不是数字, 会抛出异常, 此时不抛出, 作操作判断</span></span><br><span class="line">                <span class="keyword">switch</span> (ops[i])&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">                        numStack.pop();</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">                        Integer peek = numStack.peek();</span><br><span class="line">                        numStack.push(peek*<span class="number">2</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                        <span class="keyword">if</span>(numStack.size() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                            numStack.push(numStack.peek());</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            Integer top = numStack.peek();</span><br><span class="line">                            Integer second = numStack.get(numStack.size() - <span class="number">2</span>);</span><br><span class="line">                            numStack.push(top+second);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : numStack) &#123;</span><br><span class="line">            sum += integer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASE-多态</title>
      <link href="/2019/08/26/JAVASE-%E5%A4%9A%E6%80%81/"/>
      <url>/2019/08/26/JAVASE-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="对象的多态性"><a href="#对象的多态性" class="headerlink" title="对象的多态性"></a>对象的多态性</h2><blockquote><p>体现为<strong>父类引用变量可以指向子类对象</strong></p><p>多态的前提<strong>是必须有子父类关系或者类实现接口关系，否则无法完成多态</strong></p><p><strong>在使用多态后的父类引用变量调用方法时，会调用子类重写后的方法</strong></p></blockquote><h2 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型或接口类型 引用变量 = <span class="keyword">new</span> 子类对象();</span><br></pre></td></tr></table></figure><h2 id="成员变量的特点"><a href="#成员变量的特点" class="headerlink" title="成员变量的特点"></a>成员变量的特点</h2><p>编译时：参考父类是否有该成员变量，如果有则编译成功，否则编译失败</p><p>运行时：运行的是父类的变量值</p><blockquote><p>编译和运行都是参考父类中的成员变量</p></blockquote><h2 id="成员方法的特点"><a href="#成员方法的特点" class="headerlink" title="成员方法的特点"></a>成员方法的特点</h2><p>编译时：参考父类是否有该成员方法</p><p>运行时：运行的是子类的重写方法</p><blockquote><p>编译看父类有没有此成员方法，运行参考子类的成员方法。</p><a id="more"></a></blockquote><h2 id="多态中的关键字-instanceof"><a href="#多态中的关键字-instanceof" class="headerlink" title="多态中的关键字 instanceof"></a>多态中的关键字 instanceof</h2><p>多态中的关键字： instanceof 比较运算符，返回真假值，可以用于比较引用数据类型</p><p><img src="//smallpineapp1e.github.io/2019/08/26/JAVASE-多态/1566752079430.png" alt="1566752079430"></p><h2 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h2><p><img src="//smallpineapp1e.github.io/2019/08/26/JAVASE-多态/1566752289001.png" alt="1566752289001"></p><blockquote><p><strong>父类的引用   变量名  =  new  子类的对象();</strong></p><p>JAVA强制数据类型的语言，参与运算的数据要<strong>保证类型的统一性！</strong></p><p><strong>向上转型：可以调用父类的共有成员方法，无法调用子类的特有成员方法！</strong></p><p>若要调用子类特有成员方法，则需<strong>向下转型</strong> ！</p><p><strong>子类数据类型  变量名 = (子类数据类型)  父类数据类型变量</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASE-接口</title>
      <link href="/2019/08/25/JAVASE-%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/08/25/JAVASE-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h2><blockquote><p><strong>接口是功能的集合</strong>，同样是一种数据类型，是比抽象类更为抽象的“类”。</p><p><strong>接口只描述所应该具备的方法，并没有具体实现</strong>，具体的实现由接口的实现类（相当于接口的子类）来完成。<strong>这样将功能的定义与实现分离，优化了程序设计。</strong></p></blockquote><h2 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h2><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名字(参数列表);</span><br></pre></td></tr></table></figure><blockquote><p>接口中的成员方法<strong>全部都为抽象方法！</strong></p><p>可以省略修饰符public abstract，但<strong>仍然存在！</strong></p></blockquote><a id="more"></a><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 数据类型 变量名 = 值</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><blockquote><p>接口中的成员变量都为<strong>常量</strong>！！</p><p>在接口中定义常量，可省略修饰符public static final，但<strong>仍然存在</strong>！</p></blockquote><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口.成员变量</span><br></pre></td></tr></table></figure><blockquote><p>常量被<strong>静态修饰</strong>，可以被类名直接调用，被接口的名字直接调用</p></blockquote><h2 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h2><blockquote><p>一个类可以实现多个接口(<strong>区别继承</strong>)</p><ul><li>类的多继承存在安全隐患(<strong>同样的函数无法识别该调用哪个函数</strong>)</li></ul></blockquote><p>Q：接口多实现的安全隐患存在吗？</p><p>A：没有安全隐患。因为接口中的方法是<strong>抽象方法</strong>，没有方法体，<strong>实现类是负责重写抽象方法</strong>。所以调用实现类的重写方法时，不存在安全隐患！</p><h2 id="类继承类的同时可以实现多个接口"><a href="#类继承类的同时可以实现多个接口" class="headerlink" title="类继承类的同时可以实现多个接口"></a>类继承类的同时可以实现多个接口</h2><blockquote><p><strong>继承类只能是一个类，但可以实现多个接口</strong>，但子类(实现类)必须重写<strong>全部</strong>抽象方法才可以创建对象。</p></blockquote><h2 id="接口之间的多继承"><a href="#接口之间的多继承" class="headerlink" title="接口之间的多继承"></a>接口之间的多继承</h2><blockquote><p> <strong>接口与接口之间</strong>可以实现多个继承</p><p>一个接口可以同时继承<strong>多个</strong>接口。</p></blockquote><h2 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h2><p><img src="//smallpineapp1e.github.io/2019/08/25/JAVASE-接口/1566749558884.png" alt="1566749558884"></p><h2 id="接口和抽象类的比较"><a href="#接口和抽象类的比较" class="headerlink" title="接口和抽象类的比较"></a>接口和抽象类的比较</h2><p>相同点：</p><blockquote><ul><li>都位于继承的顶端，用于被其它类实现或继承</li><li>都不能直接实例化对象</li><li>都包含抽象方法，其子类必须重写这些抽象方法</li></ul></blockquote><p>不同点：</p><blockquote><ul><li>抽象类为部分方法提供实现，避免子类重复实现这些方法，提高代码重用性；接口只能包含抽象方法；</li><li>一个类只能继承一个父类，却可以实现多个接口（<strong>接口弥补了JAVA的单继承</strong>）</li><li>抽象类应该是这个事物应该具备的内容，继承体系中是 is…a 关系</li><li>接口是这个事物中的额外功能，继承体系中是 has…a 关系</li></ul></blockquote><h2 id="抽象类和接口的选用"><a href="#抽象类和接口的选用" class="headerlink" title="抽象类和接口的选用"></a>抽象类和接口的选用</h2><blockquote><ul><li><strong>优先选择接口，尽量少用抽象类</strong></li><li><strong>需要定义子类的行为，又要为子类提供共性功能时才选用抽象类</strong></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASE-抽象类及抽象方法</title>
      <link href="/2019/08/25/JAVASE-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%8F%8A%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/25/JAVASE-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%8F%8A%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ol><li>用<strong>abstract</strong>关键字修饰</li><li>无法直接创建对象，原因：调用抽象方法没有意义</li><li>只有覆盖了抽象类中的所有抽象方法，其子类才可以创建对象，否则该子类依然是一个抽象类</li><li>之所以继承抽象类，更多的是在思想，面对共性类型操作更简洁。</li></ol></blockquote><h3 id="与抽象类不可并存的关键字"><a href="#与抽象类不可并存的关键字" class="headerlink" title="与抽象类不可并存的关键字"></a>与抽象类不可并存的关键字</h3><blockquote><ol><li><strong>private</strong>：私有方法子类无法继承，所以更不存在覆盖，与实现抽象方法相互矛盾。</li><li><strong>final</strong> ：final关键字修饰在类上表示这是一个最终类，无法被继承，与abstract关键字共存会互相矛盾。</li><li><strong>static</strong> ：因为static修饰的方法是静态方法，其可以直接被类所调用。而abstract修饰的方法为抽象方法，即无方法体的方法，不能够被直接调用，需要在子类或实现类中去编写完整的方法处理逻辑后才能使用。互相矛盾。</li></ol></blockquote><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h4><p><img src="//smallpineapp1e.github.io/2019/08/25/JAVASE-抽象类及抽象方法/1566746163348.png" alt="1566746163348"></p><h4 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h4><p><img src="//smallpineapp1e.github.io/2019/08/25/JAVASE-抽象类及抽象方法/1566746167567.png" alt="1566746167567"></p>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
            <tag> 抽象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组</title>
      <link href="/2019/08/25/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
      <url>/2019/08/25/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-稀疏数组-sparsearray"><a href="#1-稀疏数组-sparsearray" class="headerlink" title="1.稀疏数组(sparsearray)"></a>1.稀疏数组(sparsearray)</h2><h3 id="1-1-应用场景"><a href="#1-1-应用场景" class="headerlink" title="1.1 应用场景 :"></a>1.1 应用场景 :</h3><p>当一个数组中大部分为0或者为同一个数值时可转化为稀疏数组进行存储</p><p>例子 : <strong>五子棋棋盘</strong></p><p><img src="//smallpineapp1e.github.io/2019/08/25/稀疏数组/1562675644440.png" alt="1562675644440"></p><p>假设黑棋为1, 白棋为2, 其它未放置棋子的位置为0, 则可得到如下一个二维数组</p><p><img src="//smallpineapp1e.github.io/2019/08/25/稀疏数组/2019-08-25_110340.jpg" alt></p><p>如果我要保存当前棋盘的状态 , 保存没有放置棋子的地方是毫无意义而且浪费内存空间的 , 所以此时稀疏数组可以起到非常大的作用.</p><a id="more"></a><h3 id="1-2什么是稀疏数组"><a href="#1-2什么是稀疏数组" class="headerlink" title="1.2什么是稀疏数组"></a>1.2什么是稀疏数组</h3><blockquote><p>稀疏数组共有3列 , 第1列表示行, 第2列表示列, 第三列表示值.</p><p>稀疏数组的第1行保存原数组中共有多少行, 多少列与多少个有效值</p><p>第2行开始保存每一个有效值所处的行数, 列数与对应的值</p></blockquote><h3 id="1-3-二维数组对应的稀疏数组"><a href="#1-3-二维数组对应的稀疏数组" class="headerlink" title="1.3 二维数组对应的稀疏数组"></a>1.3 二维数组对应的稀疏数组</h3><p>​                                                                                        行  列  值</p><p><img src="//smallpineapp1e.github.io/2019/08/25/稀疏数组/2019-08-25_110425.jpg" alt></p><p>这样做的好处是将9*9=81个值压缩成3*7=21个值保存, 大大减小了占用的内存空间</p><h3 id="1-4-压缩数组思路"><a href="#1-4-压缩数组思路" class="headerlink" title="1.4 压缩数组思路"></a>1.4 压缩数组思路</h3><blockquote><p>① 遍历原始二维数组 , 得到有效数据的个数count</p><p>② 根据count创建稀疏数组 , 行数为(count+1), 因为第一行保存原数组的行列及有效值个数, sparseArray[count+1][3]</p><p>③ 将原二维数组的有效数据存放到sparseArray当中</p></blockquote><h3 id="1-5-解压数组思路"><a href="#1-5-解压数组思路" class="headerlink" title="1.5 解压数组思路"></a>1.5 解压数组思路</h3><blockquote><p>① 读取稀疏数组的第一行, 构建原始数组 array[sparseArray[0][0]][sparseArray[0][1]]</p><p>②从稀疏数组的第二行开始读取数据存放到原始数组中</p></blockquote><h3 id="1-6-代码实现"><a href="#1-6-代码实现" class="headerlink" title="1.6 代码实现"></a>1.6 代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smallpineapple.sparseArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//构建原二维数组</span></span><br><span class="line"><span class="keyword">int</span> chessArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">chessArr[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">chessArr[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//输出原始二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始的二维数组:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : row) &#123;</span><br><span class="line">System.out.print(item+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历原始二维数组的有效数据</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : row) &#123;</span><br><span class="line"><span class="keyword">if</span>(item!=<span class="number">0</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"有效数据个数为:"</span>+count);</span><br><span class="line"><span class="comment">//创建稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparsearray[][] = <span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">sparsearray[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">sparsearray[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">sparsearray[<span class="number">0</span>][<span class="number">2</span>] = count;</span><br><span class="line"><span class="comment">//遍历二维数组, 将非0数据存放到数组当中去 </span></span><br><span class="line"><span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">sparsearray[row][<span class="number">0</span>] = i;</span><br><span class="line">sparsearray[row][<span class="number">1</span>] = j;</span><br><span class="line">sparsearray[row][<span class="number">2</span>] = chessArr[i][j];</span><br><span class="line"><span class="comment">//下一个数据存放到下一行</span></span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出稀疏数组</span></span><br><span class="line">System.out.println(<span class="string">"稀疏数组:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparsearray.length; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t"</span>, sparsearray[i][<span class="number">0</span>],sparsearray[i][<span class="number">1</span>],sparsearray[i][<span class="number">2</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//稀疏数组转换成原始数组</span></span><br><span class="line"><span class="keyword">int</span>[][] transferArray = <span class="keyword">new</span> <span class="keyword">int</span>[sparsearray[<span class="number">0</span>][<span class="number">0</span>]][sparsearray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparsearray.length; i++) &#123;</span><br><span class="line">transferArray[sparsearray[i][<span class="number">0</span>]][sparsearray[i][<span class="number">1</span>]] = sparsearray[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出原始数组</span></span><br><span class="line">System.out.println(<span class="string">"原始数组形式:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] a : transferArray) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果 : </span><br><span class="line"></span><br><span class="line">原始的二维数组:</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">有效数据个数为:<span class="number">6</span></span><br><span class="line">稀疏数组:</span><br><span class="line"><span class="number">11</span><span class="number">11</span><span class="number">6</span></span><br><span class="line"><span class="number">3</span><span class="number">1</span><span class="number">1</span></span><br><span class="line"><span class="number">3</span><span class="number">2</span><span class="number">2</span></span><br><span class="line"><span class="number">3</span><span class="number">3</span><span class="number">2</span></span><br><span class="line"><span class="number">3</span><span class="number">4</span><span class="number">2</span></span><br><span class="line"><span class="number">3</span><span class="number">5</span><span class="number">2</span></span><br><span class="line"><span class="number">4</span><span class="number">5</span><span class="number">1</span></span><br><span class="line">原始数组形式:</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 稀疏数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析HTTP协议</title>
      <link href="/2019/08/24/%E6%B5%85%E6%9E%90HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/08/24/%E6%B5%85%E6%9E%90HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="浅析HTTP协议"><a href="#浅析HTTP协议" class="headerlink" title="浅析HTTP协议!"></a><strong>浅析HTTP协议!</strong></h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><h3 id="1-1-HTTP是什么？"><a href="#1-1-HTTP是什么？" class="headerlink" title="1.1 HTTP是什么？"></a>1.1 HTTP是什么？</h3><p>HTTP(超文本传输协议)是一个应用层的、基于请求和响应模式的、无状态的面向对象的协议，常基于TCP协议，由于其简洁、快速而适用于分布式超媒体系统，绝大多数WEB开发，都是构建在HTTP协议之上的WEB应用。</p><h3 id="1-2-HTTP的主要特点"><a href="#1-2-HTTP的主要特点" class="headerlink" title="1.2 HTTP的主要特点"></a>1.2 HTTP的主要特点</h3><ol><li><p><strong>支持客户端/服务器模式（Client/Server）</strong></p><p><img src="//smallpineapp1e.github.io/2019/08/24/浅析HTTP协议/HTTP.jpg" alt="HTTP"></p><a id="more"></a></li><li><p><strong>简单快速：</strong></p><p>​    客户端在向服务器发送请求服务时，只需指定请求的方法和路径即可。请求方法常用的方法有GET、POST、HEAD。每种方法向服务器发送请求所发生的联系的类型不同。</p><p>​    由于HTTP协议简单快速，使得其服务器程序规模小，通信速度很快。</p></li><li><p><strong>灵活性高：</strong></p><p>​    HTTP可以传输任意类型的数据对象，用Content-Type来标记。</p></li><li><p><strong>无连接性：</strong></p><p>​    含义在于服务器每次只处理客户端发送的一个请求，处理完请求后并受到客户端的响应后自动与客户端断开。</p></li><li><p><strong>无状态：</strong></p><p>​    无状态指的是对于事务处理没有记忆能力。所以如果服务器后续处理需要用到前面发送请求时所客户端携带的信息，则会增大此次连接的数据量，若每次均需要前面的信息，则数据量会一直增大。若服务器不需要先前携带的信息，那么它的应答会相比之下较快。</p><hr></li></ol><h2 id="2-HTTP协议之URL篇"><a href="#2-HTTP协议之URL篇" class="headerlink" title="2. HTTP协议之URL篇"></a>2. HTTP协议之URL篇</h2><p>HTTP URL(URL是一种特殊类型的URI，包含了用户查找某个资源的足够的信息)的格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://host[":"port][abs_path]</span><br></pre></td></tr></table></figure><p>HTTP要通过HTTP协议来定位网络资源</p><h3 id="2-1-名词解释"><a href="#2-1-名词解释" class="headerlink" title="2.1 名词解释"></a>2.1 名词解释</h3><blockquote><p><strong>host：</strong>表示合法的Internet主机域名或IP地址；</p><p><strong>port：</strong>表示一个端口号，若不指定则默认为缺省端口号80；</p><p><strong>abs_path：</strong>指定请求资源的URI；如果在RUL中没有给出asb_path，那么它作为URI时，会以”/“的形式给出</p></blockquote><p>这个工作通常由浏览器为我们完成。</p><h3 id="2-2-例子"><a href="#2-2-例子" class="headerlink" title="2.2 例子"></a>2.2 例子</h3><ol><li><p><a href="http://www.gdou.edu.cn" target="_blank" rel="noopener">www.gdou.edu.cn</a></p><p>浏览器会自动转换为：<a href="http://www.gdou.edu.cn" target="_blank" rel="noopener">http://www.gdou.edu.cn</a></p></li><li><p><a href="http://192.168.0.112:8080/index.jsp" target="_blank" rel="noopener">http://192.168.0.112:8080/index.jsp</a></p><p>典型的往IP地址为192.168.0.112的8080端口发送请求，请求访问URI为index.jsp的资源。</p></li></ol><h2 id="3-HTTP协议之请求篇"><a href="#3-HTTP协议之请求篇" class="headerlink" title="3. HTTP协议之请求篇"></a>3. HTTP协议之请求篇</h2><h3 id="3-1-HTTP请求的组成部分"><a href="#3-1-HTTP请求的组成部分" class="headerlink" title="3.1 HTTP请求的组成部分"></a>3.1 HTTP请求的组成部分</h3><ol><li>请求行；</li><li>消息报头(请求头)；</li><li>请求正文(请求体)。</li></ol><p><img src="//smallpineapp1e.github.io/2019/08/24/浅析HTTP协议/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.jpg" alt="请求报文"></p><h4 id="3-1-1-请求行"><a href="#3-1-1-请求行" class="headerlink" title="3.1.1 请求行"></a>3.1.1 请求行</h4><p>请求行以一个方法符号开头，以空格隔开，后面跟的是请求的URL和协议的版本</p><p>格式如下：</p><p>Method        Request-URI        HTTP-Version CRLF(回车和换行)</p><p>如上图所示标号为①、②、③组成了请求行。</p><blockquote><p><strong>Method：</strong>表示发送请求的方法，下面列举出常用的HTTP请求的方法</p><ol><li><strong>GET：</strong>请求获取Request-URI所标识的资源</li><li><strong>POST</strong>：在Request-URI所标识的资源后附加新的数据</li><li><strong>PUT</strong>：请求服务器存储一个资源，并用Request-URI作为其标识</li><li><strong>DELETE：</strong>请求服务器删除Request-URI所标识的资源</li><li><strong>TRACE：</strong>请求服务器回送收到的请求信息，一般用于测试和诊断。</li></ol></blockquote><p><strong>应用举例：</strong></p><p>​    *<em>GET： *</em>在浏览器的地址栏输入网址的方式访问网页时，浏览器会以GET方法的形式向服务器请求资源。</p><p>​        GET        /index        HTTP/1.1(CLRLF)</p><p>​    <strong>POST：</strong>在向服务器发送请求时附加上自己需要携带的信息，不会显示在URI后面而会保存在请求正文(请求体)中</p><p>​                  如上图所示，提交了三个信息并保存在请求正文中，浏览器会以键值对形式将信息进行存储并进行信息的利用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="string">"name"</span>,<span class="string">"tom"</span>&gt;</span><br><span class="line">&lt;<span class="string">"password"</span>,<span class="string">"1234"</span>&gt;</span><br><span class="line">&lt;<span class="string">"realName"</span>,<span class="string">"tomson"</span>&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>PUT：</strong>常用于向服务器发送请求时更新一个资源，并携带上希望更新的信息标识及更新的内容。</p><p>​    <strong>DELETE：</strong>常用于向服务器发送请求时删除一个资源，并鞋带上希望删除的信息标识。</p><hr><h4 id="3-1-2-请求报头稍后详述"><a href="#3-1-2-请求报头稍后详述" class="headerlink" title="3.1.2 请求报头稍后详述"></a>3.1.2 请求报头稍后详述</h4><hr><h4 id="3-1-3-请求正文-略"><a href="#3-1-3-请求正文-略" class="headerlink" title="3.1.3 请求正文(略)"></a>3.1.3 请求正文(略)</h4><hr><h2 id="4-HTTP协议之响应篇"><a href="#4-HTTP协议之响应篇" class="headerlink" title="4.HTTP协议之响应篇"></a>4.HTTP协议之响应篇</h2><p>在接收到请求信息并处理完毕后，服务器会返回一个HTTP响应信息给客户端。</p><h3 id="4-1-HTTP响应的组成部分"><a href="#4-1-HTTP响应的组成部分" class="headerlink" title="4.1 HTTP响应的组成部分"></a>4.1 HTTP响应的组成部分</h3><ol><li>状态行(响应行)</li><li>消息报头(响应头)</li><li>响应正文(响应体)</li></ol><h4 id="4-1-1-状态行-响应行"><a href="#4-1-1-状态行-响应行" class="headerlink" title="4.1.1 状态行(响应行)"></a>4.1.1 状态行(响应行)</h4><p>格式如右 ： HTTP-Version        Status-Code        Reason-Phrase       CRLF</p><ol><li>HTTP-Version表示服务器HTTP协议的版本；</li><li>Status-Code表示服务器发回的响应状态代码；</li><li>Reanson-Phrase表示状态码的描述</li></ol><h5 id="状态码-Status-code-介绍"><a href="#状态码-Status-code-介绍" class="headerlink" title="状态码(Status-code)介绍"></a>状态码(Status-code)介绍</h5><p>状态代码由3位数字组成，第1个数字定义了响应的类别，有5种可能取值：</p><ol><li><strong>1xx：</strong>表示消息已被服务器接收到，继续处理。</li><li><strong>2xx</strong>：成功—-表示请求已被成功接收、解析并接受</li><li><strong>3xx：</strong>重定向—-表示此次请求将被转换成另一个请求继续下一步的操作</li><li><strong>4xx：</strong>客户端错误—-表示请求无法被服务器接收</li><li><strong>5xx</strong>：服务器端错误—-服务器端未能正确处理客户端发送的请求。</li></ol><p><strong>常见状态码：</strong></p><table><thead><tr><th align="center">状态码</th><th align="center">状态描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">OK</td><td align="center">客户端请求成功</td></tr><tr><td align="center">400</td><td align="center">Bad Request</td><td align="center">客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="center">请求未经授权，此状态码必须与WWW-Authenticate报头一起食用</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="center">服务器收到请求，但是拒绝提供服务</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="center">请求的资源不存在 eg：输入了错误的URL</td></tr><tr><td align="center">500</td><td align="center">Internal Server Error</td><td align="center">服务器发生了不可预期的错误 eg：信息解析异常</td></tr><tr><td align="center">503</td><td align="center">Server Unavailable</td><td align="center">服务器当前不能处理科幻段的请求，一段时间后可能恢复正常</td></tr></tbody></table><hr><h4 id="4-1-2-响应报头-响应头-稍后详述"><a href="#4-1-2-响应报头-响应头-稍后详述" class="headerlink" title="4.1.2 响应报头(响应头)稍后详述"></a>4.1.2 响应报头(响应头)稍后详述</h4><hr><h4 id="4-1-3-响应正文-响应体-就是服务器返回的资源的内容"><a href="#4-1-3-响应正文-响应体-就是服务器返回的资源的内容" class="headerlink" title="4.1.3 响应正文(响应体)就是服务器返回的资源的内容"></a>4.1.3 响应正文(响应体)就是服务器返回的资源的内容</h4><hr><h2 id="5-HTTP协议之消息报头篇"><a href="#5-HTTP协议之消息报头篇" class="headerlink" title="5. HTTP协议之消息报头篇"></a>5. HTTP协议之消息报头篇</h2><h3 id="5-1-HTTP消息组成部分"><a href="#5-1-HTTP消息组成部分" class="headerlink" title="5.1 HTTP消息组成部分"></a>5.1 HTTP消息组成部分</h3><p>HTTP消息由客户端到服务器的请求及服务器到客户端的响应组成。请求消息和响应消息都是由下列四项组成：</p><ol><li>开始行(对于请求消息，开始行就是请求行；对于响应消息，开始行就是状态行)；</li><li>[消息报头](请求头/响应头)；</li><li>空行(CRLF)；</li><li>[消息正文]</li></ol><h3 id="5-2-HTTP消息报头组成部分"><a href="#5-2-HTTP消息报头组成部分" class="headerlink" title="5.2 HTTP消息报头组成部分"></a>5.2 HTTP消息报头组成部分</h3><ol><li>普通报头</li><li>请求报头</li><li>响应报头</li><li>实体报头</li></ol><p>每一个报头域都是由名字 + “:” + 空格 + 值组成，消息报头域的名字是大小写无关的。</p><h4 id="5-2-1-普通报头"><a href="#5-2-1-普通报头" class="headerlink" title="5.2.1 普通报头"></a>5.2.1 普通报头</h4><p>在普通报头中，有少数报头域用于所有的请求和响应信息，但并不用于被传输的实体，只用于传输的信息。</p><p><strong>eg：</strong></p><ol><li><strong>Cache-Control：</strong>用于指定缓存指令，缓存指令是：<ol><li><strong>单向的</strong>(响应中出现的缓存指令在请求中未必会出现)</li><li><strong>独立的</strong>(一个消息的缓存指令不会影响另一个消息处理的缓存机制)，HTTP1.0使用的类似的报头域为<strong>Pragma</strong></li></ol></li><li>请求时的缓存指令包括：<strong>no-cache(用于指示请求或响应信息不能缓存)、no-store、max-age、max-stale、min-fresh、only-if-cached；</strong></li><li>响应时的缓存指令包括：<strong>public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage</strong></li></ol><h5 id="应用示例-eg"><a href="#应用示例-eg" class="headerlink" title="应用示例(eg)"></a>应用示例(eg)</h5><p>为了指示IE浏览器(客户端)不要使用缓存页面，服务器端的JSP程序可以编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line"><span class="comment">//response.setHeader("Pragma","no-cache");作用和上述代码相同，通常二者合用</span></span><br></pre></td></tr></table></figure><p>这句代码将在发送的响应信息中设置普通报头域：Cache-Control : no-cache</p><p>Date普通报头域表示消息产生的日期和时间</p><p>Connection普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定”close”选项，通知服务器，在响应完成后，关闭连接。</p><h4 id="5-2-2-请求报头"><a href="#5-2-2-请求报头" class="headerlink" title="5.2.2 请求报头"></a>5.2.2 请求报头</h4><p>请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。</p><h5 id="常用的请求报头"><a href="#常用的请求报头" class="headerlink" title="常用的请求报头"></a>常用的请求报头</h5><blockquote><p><strong>Accept</strong></p></blockquote><p>​    Accept请求报头域用于指定客户端接收哪种类型的信息。</p><p>​     *<em>eg:  *</em></p><p>​        Accept:    image/gif</p><p>​        表示客户端希望接收GIF图像格式的资源；</p><p>​        Accept:    text/html</p><p>​        表示客户端希望接受html文本</p><blockquote><p><strong>Accept-Charset</strong></p></blockquote><p>​    Accept-Charset请求报头域用于指定客户端接受的字符集</p><p>​    <strong>eg：</strong></p><p>​        Accept-Charset:    iso-8859-1, gb2312</p><p>​        如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。</p><blockquote><p><strong>Accept-Encoding</strong></p></blockquote><p>​    Accept-Encoding请求报头域类似于Accept，但是它可以指定可接受的内容编码。</p><p>​    <strong>eg：</strong></p><p>​        Accept-Encoding:gzip.deflate</p><p>​        如果请求消息中没有设置这个域，则服务器假定客户端对各种内容编码都可以接受。</p><blockquote><p><strong>Accept-Lanuage</strong></p></blockquote><p>​    Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。</p><p>​    <strong>eg：</strong></p><p>​        Accept-Language: zh-cn</p><p>​        如果请求消息中没有设置这个域则默认接受任何语言。</p><blockquote><p><strong>Authorization</strong></p></blockquote><p>​    主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401(Not authorization)，可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。</p><blockquote><p><strong>Host(发送请求时，该报头域是必须需要的)</strong></p></blockquote><p>​    该报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来。</p><p>​    <strong>eg：</strong></p><p>​        输入：<a href="http://www.gdou.edu.cn" target="_blank" rel="noopener">http://www.gdou.edu.cn</a>    </p><p>​        浏览器发送的请求信息中，就会包含Host请求报头域，如下所示：</p><p>​        Host：<a href="http://www.gdou.edu.cn" target="_blank" rel="noopener">www.gdou.edu.cn</a></p><p>​        此处使用了缺省端口号80，若指定了端口号则会变为 <a href="http://www.gdou.edu.cn:port(端口号)" target="_blank" rel="noopener">www.gdou.edu.cn:port(端口号)</a></p><blockquote><p><strong>User-Agent</strong></p></blockquote><p>​        我们上网登陆论坛时，往往会看到一些欢迎信息，其中列出了自己正在使用的浏览器版本，操作系统等        等的个人可公开信息，这会让我们觉得很神奇，其实原因是在客户端向服务器发送请求时使用了User-Agent        这个报头域，它可以获取到你电脑中的一些信息，并发送给服务器，这就理所当然为什么服务器端知道你的        这些“隐私”啦。不过这个报头域不是必需的，不适用User-Agent这个报头域，那么服务器端就无法得知我们的        信息了。</p><h5 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h5><p><img src="//smallpineapp1e.github.io/2019/08/24/浅析HTTP协议/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.jpg" alt="请求报文"></p><hr><h4 id="5-2-3-响应报头-响应头"><a href="#5-2-3-响应报头-响应头" class="headerlink" title="5.2.3 响应报头(响应头)"></a>5.2.3 响应报头(响应头)</h4><p>响应报头允许服务器传递不能放在状态行(响应行)中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。</p><h5 id="常用的响应报头"><a href="#常用的响应报头" class="headerlink" title="常用的响应报头"></a>常用的响应报头</h5><blockquote><p><strong>Location</strong></p></blockquote><p>Location响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。</p><blockquote><p><strong>Server</strong></p></blockquote><p>Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。</p><h5 id="应用示例-1"><a href="#应用示例-1" class="headerlink" title="应用示例"></a>应用示例</h5><p><img src="//smallpineapp1e.github.io/2019/08/24/浅析HTTP协议/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.jpg" alt="响应报文"></p>   <hr><h4 id="5-2-4-实体报头"><a href="#5-2-4-实体报头" class="headerlink" title="5.2.4 实体报头"></a>5.2.4 实体报头</h4><p>请求和响应信息都可以传递一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送。实体报头定义了关于实体正文(<strong>eg:</strong>有无实体正文)和请求所标识的资源的元信息。</p><h5 id="常用的实体报头"><a href="#常用的实体报头" class="headerlink" title="常用的实体报头"></a>常用的实体报头</h5><blockquote><p><strong>Content-Encoding</strong></p></blockquote><p>Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指定了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型必须采用相应的解码机制。Content-Encoding用于<strong>记录文档的压缩方法</strong></p><p><strong>eg：</strong></p><p>Cotent-Encoding : gzip</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-7.整数反转</title>
      <link href="/2019/08/24/leetcode-7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2019/08/24/leetcode-7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="leetcode-7-整数反转"><a href="#leetcode-7-整数反转" class="headerlink" title="leetcode-7. 整数反转"></a>leetcode-7. 整数反转</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><table><thead><tr><th>示例 1:</th></tr></thead><tbody><tr><td>输入: 123</td></tr><tr><td>输出: 321</td></tr></tbody></table><table><thead><tr><th>示例 2:</th></tr></thead><tbody><tr><td>输入: -123</td></tr><tr><td>输出: -321</td></tr></tbody></table><table><thead><tr><th>示例 3:</th></tr></thead><tbody><tr><td>输入: 120</td></tr><tr><td>输出: 21</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 $[-2^{31}, 2^{31}-1] $。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><a id="more"></a><h3 id="重点难点-判断溢出"><a href="#重点难点-判断溢出" class="headerlink" title="重点难点 : 判断溢出"></a>重点难点 : 判断溢出</h3><p>例子 : </p><p>假设输入一个数,并将其数字倒序输出,  如果超出范围为$[-2^{8}, 2^{8}-1]$则判断为溢出.</p><p>例如 : </p><table><thead><tr><th>示例 1:</th></tr></thead><tbody><tr><td>输入 : 59</td></tr><tr><td>输出 : 95</td></tr></tbody></table><table><thead><tr><th>示例 2:</th></tr></thead><tbody><tr><td>输入 : 159</td></tr><tr><td>输出 : 0</td></tr></tbody></table><hr><p>此时, 假设输入整数 : 159, 倒序输出结果应为951</p><p>question1 : 那么我们该如何判断它溢出呢 ? </p><blockquote><p>首先确定范围为$[-256, 255] $, 我们打算从最低位开始一位一位地反转, 将每一位取出后存储到一个变量$(ans)$中, 判断该变量是否已经超出了最大值的前$(n-1)$位……</p></blockquote><p>question 2 : 为什么是判断$(n-1)$而不是$(n-2),(n-3),… $呢 ? </p><blockquote><p>在溢出判断时, 我们最关心的是它在什么时候溢出, 那就是在最接近边界值的时候会溢出, 请看下面的图示</p></blockquote><p><img src="//smallpineapp1e.github.io/2019/08/24/leetcode-7-整数反转/1560431280460.png" alt="1560431280460"></p><p>在每一位被取出时, 都与边界值的前$(n-1)$位的数值进行比较, 这样的好处就是当被反转的数准备取下一位进行反转时, 已经被反转的数值的位数<strong>有可能</strong>是$(n-1)$位, 那么如果此时如果该值已经大于边界值的前$(n-1)$位的最大值或小于边界值的前$(n-1)$位的最小值, 那么下一位已经没有必要再取出来作反转了, 因为前$(n-1)$位的数值已经溢出了, 最后一位再添加上去, 也必定溢出</p><p>补充 : 为什么是有可能 ? </p><blockquote><p>因为反转的位数取决于用户输入的数字 , 如果输入的数字位数根本没有到$n$位, 例如 : 38, 不会溢出, 但是如果输入的数字原本是和边界值位数相同, 此时在最后一位被反转时, 已经被反转的数值的位数刚好是$(n-1)$位</p></blockquote><p>question3 : 如果反转后的数值和边界值的前$(n-1)$位都相同, 那该怎么办 ? </p><p>这就是”强强对碰”了 , 胜负决定在第$n$位, 如果原来的数值的第n位数值比边界值小或比边界值大, 那么这个数就溢出, 因为第n位必定会跟在反转数值的最后一位</p><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//取末位数字</span></span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//如果反转的数字大于整型的前n-1位, 则溢出</span></span><br><span class="line">            <span class="comment">//或者反转后的数字刚好等于整型最大值的前n-1位, 但最后一位大于整型的最后一位, 也溢出</span></span><br><span class="line">            <span class="keyword">if</span> (ans &gt; Integer.MAX_VALUE / <span class="number">10</span> || ans == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp;  pop &gt; Integer.MAX_VALUE % <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ans &lt; Integer.MIN_VALUE / <span class="number">10</span> || ans == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; Integer.MIN_VALUE % <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans = ans * <span class="number">10</span> + pop;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJPA入门</title>
      <link href="/2019/08/24/SpringDataJPA%E5%85%A5%E9%97%A8/"/>
      <url>/2019/08/24/SpringDataJPA%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringData-JPA"><a href="#SpringData-JPA" class="headerlink" title="SpringData JPA"></a>SpringData JPA</h1><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@Entity</td><td>告诉Spring这是一个实体类</td></tr><tr><td>@Table(name = “表名”)</td><td>指定生成的数据表表名</td></tr><tr><td>@Column(name = “列名”)</td><td>指定生成的数据列的列名, 一般加在get方法上</td></tr><tr><td>@Id</td><td>指定主键列</td></tr><tr><td>@GeneratedValue</td><td>指定主键生成策略</td></tr><tr><td>@Transient</td><td>实体类中的某一个属性不映射到数据库的表中</td></tr><tr><td>@Temporal</td><td>指定日期类型(DATE,DATETIME, TIMESTAMP)</td></tr></tbody></table><a id="more"></a><h2 id="单向多对一关系"><a href="#单向多对一关系" class="headerlink" title="单向多对一关系"></a>单向多对一关系</h2><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@JoinColumn(name= “外键列的列名”)</td><td>映射外键列的名称</td></tr><tr><td>@ManyToOne</td><td>映射多对一的关联关系</td></tr></tbody></table><h2 id="单向一对多关系"><a href="#单向一对多关系" class="headerlink" title="单向一对多关系"></a>单向一对多关系</h2><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@OneToMany</td><td>映射一对多的关联关系</td></tr><tr><td>@JoinColum(name=”外键列列名”)</td><td>映射外键列的名称</td></tr></tbody></table><p>单向 1-n 关联关系执行保存时, 一定回多出UPDATE语句, 因为多的一端在插入时不会同时插入外键列</p><blockquote><p>默认情况下, 若删除1的一端, 则<strong>会先把关联的n的一端的外键置空</strong>, 然后进行删除, <strong>注意这在实际意义当中并不有利</strong></p></blockquote><p> 可以通过修改@OneToMany的 cascade属性来修改默认的删除策略. </p><blockquote><p>设置@OneToMany的mappedBy属性, 可以让维护权交给多的一方维护 ，因为在多的一方没有完全删除完时，与其有关联关系的一的一方无法删除，所以由多的一方维护关联关系</p></blockquote><h2 id="双向多对一-多对一-关系"><a href="#双向多对一-多对一-关系" class="headerlink" title="双向多对一(多对一)关系"></a>双向多对一(多对一)关系</h2><blockquote><p>两个实体类中都有@ManyToOne属性, 且外键列的列名相同</p></blockquote><p>若先保存n的一端, 再保存1的一端, 默认情况下, 会多出n条update语句</p><p>若先保存1的一端, 再保存n的一端, 默认情况下, 会多出n条update语句</p><p>在进行双向一对多关联关系时, 建议使用n的一方来维护关联关系, 而1的乙方不维护关联关系, 这样会有效的减少SQL语句.</p><p>注意 : 若在1的一端的@OneToMany使用mappedBy属性, 则多的一端的@ManyToOne端就不能再使用@JoinColumn属性</p><blockquote><p>设置@OneToMany的mappedBy属性, 可以让维护权交给多的一方维护 ，因为在多的一方没有完全删除完时，与其有关联关系的一的一方无法删除，所以由多的一方维护关联关系</p></blockquote><h2 id="双向一对一关系"><a href="#双向一对一关系" class="headerlink" title="双向一对一关系"></a>双向一对一关系</h2><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@OneToOne(mappedBy=”对方的属性”)</td><td>映射一对一的关联关系, 对于不维护关联关系, 没有外键的一方, 使用@OneToOne来映射, 建议设置mappedBy=true</td></tr><tr><td>@JoinColumn(name=”外键列列名”, unique=true)</td><td>1 - 1关联关系, 需要添加unique=true</td></tr></tbody></table><p>双向一对一的关联关系, 建议先保存<strong>不维护关联关系的一方</strong>, 即没有外键的一方, 这样不会多出update语句, <strong>因为维护关系的一方先保存, 则外键列一开始为空, 后面再用update将外键列填补上</strong></p><ol><li><p>默认情况下, 若获取维护关联关系的一方, 则会通过左外连接获取其关联的对象</p><p>但可以通过@OneToOne的fetch属性来改变加载策略</p></li><li><p>默认情况下, 若获取不维护关联关系的一方, 则会通过左外连接获取其关联的对象</p><p>但可以通过@OneToOne的fetch属性来改变加载策略, 但依然会发送SQL语句来初始化其关联的对象</p></li></ol><blockquote><p>这说明在不维护关联关系的一方, 不建议修改fetch属性</p></blockquote><h2 id="双向多对多关系"><a href="#双向多对多关系" class="headerlink" title="双向多对多关系"></a>双向多对多关系</h2><table><thead><tr><th>注解</th></tr></thead><tbody><tr><td>@ManyToMany</td></tr><tr><td>@JoinTable(name=”表的名字”,joinColumns={@JoinColumn(name=”外键列名字”,referencedColumnName=”当前表的主键列列名”)},inverseJoinColumns={@JoinColumn(name=”关联的对象的外键列列命”, referencedColumnName=”关联的对方表的主键列列名”)})</td></tr></tbody></table><table><thead><tr><th>解释</th></tr></thead><tbody><tr><td>映射多对多关联关系</td></tr><tr><td>映射中间表</td></tr></tbody></table><table><thead><tr><th><strong>@JoinTable</strong></th></tr></thead><tbody><tr><td><strong>属性 :</strong></td></tr><tr><td>1. name : 指向中间表的名字</td></tr><tr><td>2. joinColumns : 映射当前类所在的表在中间表的外键</td></tr><tr><td>2.1 name : 指定外键列的列名 ; referencedColumnName : 指定外键列关联当前表的哪一列的列名</td></tr><tr><td>3. inverseJoinColumns : 映射关联的类所在中间表的外键列名的名字;</td></tr><tr><td>3.1 name : 指定外键列的列名 ; referencedColumnName : 指定外键列关联当前表的哪一列的列名</td></tr></tbody></table><p>使用维护关联关系或不维护关联关系的一方获取数据, SQL语句均相同.</p><h2 id="二级缓存-Ehcache"><a href="#二级缓存-Ehcache" class="headerlink" title="二级缓存(Ehcache)"></a>二级缓存(Ehcache)</h2><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@Cachable(true)</td><td>被标注的实体类才会使用缓存</td></tr></tbody></table><h2 id="JPQL"><a href="#JPQL" class="headerlink" title="JPQL"></a>JPQL</h2><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@NamedQuery(name=””, query=””)</td><td>标注在类上, 用于查询</td></tr><tr><td><strong>方法</strong></td><td></td></tr><tr><td>entityManager.createNamedQuery(“name”)</td><td>用于添加@NamedQuery标注的查询语句</td></tr><tr><td>setParameter(location, value)</td><td>location代表占位符的位置, value代表值</td></tr></tbody></table><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>entityManager.createNativeQuery(sql)</td><td>用于执行sql语句</td></tr><tr><td>setParameter(location, value)</td><td>location代表占位符的位置, value代表值</td></tr></tbody></table><h2 id="JPQL的ORDER-BY-和-GROUP-BY"><a href="#JPQL的ORDER-BY-和-GROUP-BY" class="headerlink" title="JPQL的ORDER BY 和 GROUP BY"></a>JPQL的ORDER BY 和 GROUP BY</h2><p>在JPQL里支持使用ORDER BY和GROUP BY语法</p><h2 id="JPQL关联查询"><a href="#JPQL关联查询" class="headerlink" title="JPQL关联查询"></a>JPQL关联查询</h2><p>JPQL的关联查询同HQL的关联查询, 注意要加FETCH, 则得到的是一个对象, 而且对象的集合已经初始化成功了</p><h2 id="JPQL子查询"><a href="#JPQL子查询" class="headerlink" title="JPQL子查询"></a>JPQL子查询</h2><p>和HQL的子查询一样</p><h2 id="JPQL函数"><a href="#JPQL函数" class="headerlink" title="JPQL函数"></a>JPQL函数</h2><p><img src="//smallpineapp1e.github.io/2019/08/24/SpringDataJPA入门/1560576092811.png" alt="1560576092811"></p><h2 id="JPQL的UPDATE和DELETE语句"><a href="#JPQL的UPDATE和DELETE语句" class="headerlink" title="JPQL的UPDATE和DELETE语句"></a>JPQL的UPDATE和DELETE语句</h2><p>与HQL编写语句相同</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringData JPA </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在hexo博客插入图片</title>
      <link href="/2019/08/23/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2019/08/23/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-在hexo根目录安装第三方插件"><a href="#1-在hexo根目录安装第三方插件" class="headerlink" title="1. 在hexo根目录安装第三方插件"></a>1. 在hexo根目录安装第三方插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="2-修改-config-xml文件的内容"><a href="#2-修改-config-xml文件的内容" class="headerlink" title="2. 修改_config.xml文件的内容"></a>2. 修改_config.xml文件的内容</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-插入md图片"><a href="#3-插入md图片" class="headerlink" title="3. 插入md图片"></a>3. 插入md图片</h2><h3 id="3-1-新建一个md文件"><a href="#3-1-新建一个md文件" class="headerlink" title="3.1 新建一个md文件"></a>3.1 新建一个md文件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n "<span class="built_in">title</span>"</span><br></pre></td></tr></table></figure><p><img src="//smallpineapp1e.github.io/2019/08/23/如何在hexo博客插入图片/%E6%96%B0%E5%BB%BAmd.jpg" alt="新建md"></p><h3 id="3-2-把待图片放入-posts文件夹下与title-md同名的文件夹title"><a href="#3-2-把待图片放入-posts文件夹下与title-md同名的文件夹title" class="headerlink" title="3.2 把待图片放入_posts文件夹下与title.md同名的文件夹title"></a>3.2 把待图片放入_posts文件夹下与title.md同名的文件夹title</h3><p><img src="//smallpineapp1e.github.io/2019/08/23/如何在hexo博客插入图片/%E6%94%BE%E5%85%A5%E5%9B%BE%E7%89%87.jpg" alt="新建md"></p><h3 id="3-3-在title-md中引入图片"><a href="#3-3-在title-md中引入图片" class="headerlink" title="3.3 在title.md中引入图片"></a>3.3 在title.md中引入图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">爱宠大机密</span>](<span class="link">title/46ro0003sn14n066p757.jpg</span>)</span><br></pre></td></tr></table></figure><p><img src="//smallpineapp1e.github.io/2019/08/23/如何在hexo博客插入图片/%E5%9C%A8md%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87.png" alt="在md中引入图片"></p><h3 id="3-4-编译并运行"><a href="#3-4-编译并运行" class="headerlink" title="3.4 编译并运行"></a>3.4 编译并运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="3-5-成功"><a href="#3-5-成功" class="headerlink" title="3.5 成功"></a>3.5 成功</h3><p><img src="//smallpineapp1e.github.io/2019/08/23/如何在hexo博客插入图片/%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.jpg" alt="上传成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 插入图片的步骤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学真的可以救命之约瑟夫问题</title>
      <link href="/2019/08/23/%E6%95%B0%E5%AD%A6%E7%9C%9F%E7%9A%84%E5%8F%AF%E4%BB%A5%E6%95%91%E5%91%BD%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/23/%E6%95%B0%E5%AD%A6%E7%9C%9F%E7%9A%84%E5%8F%AF%E4%BB%A5%E6%95%91%E5%91%BD%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="数学真的可以救命"><a href="#数学真的可以救命" class="headerlink" title="数学真的可以救命"></a>数学真的可以救命</h1><h2 id="今天我们要解决的是约瑟夫问题-首先我们先来了解链表到底是什么东东"><a href="#今天我们要解决的是约瑟夫问题-首先我们先来了解链表到底是什么东东" class="headerlink" title="今天我们要解决的是约瑟夫问题, 首先我们先来了解链表到底是什么东东"></a>今天我们要解决的是约瑟夫问题, 首先我们先来了解链表到底是什么东东</h2><h3 id="1-链表的基本概念"><a href="#1-链表的基本概念" class="headerlink" title="1 .链表的基本概念"></a>1 .链表的基本概念</h3><h4 id="1-1-什么是链表"><a href="#1-1-什么是链表" class="headerlink" title="1.1 什么是链表 ?"></a>1.1 什么是链表 ?</h4><p>如下图所示  : </p><p><img src="//smallpineapp1e.github.io/2019/08/23/数学真的可以救命之约瑟夫问题/%E5%8D%95%E5%8F%8C%E9%93%BE%E8%A1%A8.png" alt="“单向链表”"></p><a id="more"></a><p><strong>SingleLinkedList代表单向链表</strong> , 每一个结点含有 : </p><ol><li>data域 : 用于保存数据</li><li>next域 : 用于保存指向下一个结点的指针</li></ol><p><strong>DoubleLinkedList代表双向链表</strong> , 每一个结点含有 : </p><ol><li>prev域 : 用于保存指向前一个结点的指针</li><li>data域 : 用于保存数据</li><li>next域 : 用于保存后一个数据的指针</li></ol><h5 id="对于头结点的说明"><a href="#对于头结点的说明" class="headerlink" title="对于头结点的说明 :"></a>对于头结点的说明 :</h5><p>头结点表示一个单链表第一个含有有效数据结点之前的结点, 它一般不保存数据, 用作链表的前驱 </p><p><strong>使用头结点和不使用头结点的不同 :</strong> </p><p>​    使用头结点方便在第一个位置进行插入, 删除操作时和其它位置的插入删除操作的代码保持一致性 , 因为带上头结点之后 , 头指针永远不需要移动 , 而不带上头结点时 , 在第一个位置进行插入或删除操作时, 头指针需要移动 , 较为麻烦 , 有兴趣的读者可以尝试一下 , 这里不再详述……</p><h4 id="1-3-单向循环链表-不带头结点"><a href="#1-3-单向循环链表-不带头结点" class="headerlink" title="1.3 单向循环链表(不带头结点)"></a>1.3 单向循环链表(不带头结点)</h4><p><img src="//smallpineapp1e.github.io/2019/08/23/数学真的可以救命之约瑟夫问题/1562764751561.png" alt="1562764751561"></p><p>单向循环链表就是单向链表的升级版 , 尾结点的指针不再指向空 , 而是指向<strong>第一个结点</strong></p><h2 id="约瑟夫问题-也称”丢手帕问题”"><a href="#约瑟夫问题-也称”丢手帕问题”" class="headerlink" title="约瑟夫问题(也称”丢手帕问题”)"></a>约瑟夫问题(也称”丢手帕问题”)</h2><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1562775796416&di=a7bc151dd485871bda13d88f36f0c95e&imgtype=0&src=http%3A%2F%2Ftxt15.book118.com%2F2016%2F1231%2Fbook78535%2F78534873.jpg" style="width:500px;height:300px"><h3 id="约瑟夫问题起源"><a href="#约瑟夫问题起源" class="headerlink" title="约瑟夫问题起源 :"></a>约瑟夫问题起源 :</h3><p>在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。<strong>然而Josephus 和他的朋友并不想遵从</strong>。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。</p><p>为什么约瑟夫一开始就知道站在16和31就一定能躲过自杀呢?<strong>这就是数学的魅力所在, 真香~</strong></p><p><img src="http://www.cplusplus.me/wp-content/uploads/2014/08/ysf.png" alt="点击查看源网页"></p><p><strong>外圈表示第几个自杀, 内圈表示每个人的序号</strong></p><h3 id="单向循环链表解决约瑟夫问题"><a href="#单向循环链表解决约瑟夫问题" class="headerlink" title="单向循环链表解决约瑟夫问题"></a>单向循环链表解决约瑟夫问题</h3><h4 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述 :"></a>问题重述 :</h4><p>设有n个人围成一圈 , 编号从1到n , 约定从编号为k(1 &lt;= k &lt;= n)的人从1开始报数 , 数到 m 的那个人被淘汰 , 接着下一个人重新从1开始报数 , 数到 m 再淘汰一人 , 如此反复 , 直至剩下最后一个人为止</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路 :"></a>思路 :</h4><p>① 为什么使用单向循环链表 ? </p><p>我们可以知道约瑟夫问题是一个不断循环而且数据不断减少的过程 , 使用单向循环链表可以很方便地对数据进行删除 , 而且遍历链表方便</p><p>② 理清过程 , 首先一个带有n个结点地单循环链表 , 从第k个人开始从1报数 , 那么首先需要将头指针指向第k个人 , 辅助删除指针指向第(k-1)个人 , 定义辅助删除指针的意义是为了方便当第k个人淘汰时 , 可以很方便的将第(k-1)的next指针指向第(k+1)个人, 当人数剩下一个人时 , 则认为这场游戏已经结束了 , 最后剩下的那个人就是胜利者</p><p><img src="//smallpineapp1e.github.io/2019/08/23/数学真的可以救命之约瑟夫问题/1562767630166.png" alt="1562767630166"></p><p><img src="//smallpineapp1e.github.io/2019/08/23/数学真的可以救命之约瑟夫问题/1562767901463.png" alt="1562767901463"></p><h3 id="代码实现-JAVA版"><a href="#代码实现-JAVA版" class="headerlink" title="代码实现(JAVA版) :"></a>代码实现(JAVA版) :</h3><h4 id="1-定义小孩的结点"><a href="#1-定义小孩的结点" class="headerlink" title="1.定义小孩的结点"></a>1.定义小孩的结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Child结点, 每一个Child对象就是一个结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line"><span class="comment">//编号</span></span><br><span class="line"><span class="keyword">public</span> Integer no;</span><br><span class="line"><span class="comment">//指向下一个结点</span></span><br><span class="line"><span class="keyword">public</span> Child next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(Integer no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(Integer no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [no="</span> + no + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义单向循环链表"><a href="#2-定义单向循环链表" class="headerlink" title="2.定义单向循环链表"></a>2.定义单向循环链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SingleLinkedList来管理我们的Child结点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleLinkedList</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个结点</span></span><br><span class="line"><span class="keyword">private</span> Child first = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//当前的最后一个结点</span></span><br><span class="line"><span class="keyword">private</span> Child rear = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加结点到单向链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Child child)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断当前链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">first = child;</span><br><span class="line">child.next = first;</span><br><span class="line">rear = child;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">rear.next = child;</span><br><span class="line">child.next = first;</span><br><span class="line">rear = child;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m 数到几出圈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 共有n个孩子玩游戏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 从第k个孩子开始报数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//开始游戏, 小孩出圈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//使first指针和deleteNode指针指向第k个孩子和(k-1)个孩子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==k)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">first = first.next;</span><br><span class="line">rear = rear.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助删除指针, 需要删除元素时使用, 所以初始化时应该指向最后一个结点</span></span><br><span class="line"><span class="comment">//因为一开始第一个结点开始报数, 有可能报的是1, num也为1, 则首结点被淘汰</span></span><br><span class="line">Child deleteNode = rear;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"你自己一个人玩, 你逃不掉了, 人数过少,无法开始游戏"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"被淘汰的小孩的编号为:"</span>);</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//只剩下一个人了</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">                System.out.println(<span class="string">"存活的玩家是:"</span>+first.getNo());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否数到m, 如果是则删除该结点</span></span><br><span class="line"><span class="keyword">if</span>(count == m)&#123;</span><br><span class="line">System.out.print(deleteNode.next.getNo()+<span class="string">" "</span>);</span><br><span class="line">first = first.next;</span><br><span class="line">deleteNode.next = first;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//人数减少</span></span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//头指针与辅助删除指针都往后移一位</span></span><br><span class="line">deleteNode = deleteNode.next;</span><br><span class="line">first = first.next;</span><br><span class="line">count++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-代码运行"><a href="#3-代码运行" class="headerlink" title="3. 代码运行"></a>3. 代码运行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosephuSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">CircleLinkedList circleLinkedList = <span class="keyword">new</span> CircleLinkedList();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">41</span>;</span><br><span class="line">        <span class="comment">//生成小孩</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">Child child = <span class="keyword">new</span> Child(i);</span><br><span class="line">circleLinkedList.add(child);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// k=1, m=3, n=41</span></span><br><span class="line">circleLinkedList.play(<span class="number">1</span>, <span class="number">3</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">被淘汰的小孩的编号为:</span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">9</span> <span class="number">12</span> <span class="number">15</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span> <span class="number">27</span> <span class="number">30</span> <span class="number">33</span> <span class="number">36</span> <span class="number">39</span> <span class="number">1</span> <span class="number">5</span> <span class="number">10</span> <span class="number">14</span> <span class="number">19</span> <span class="number">23</span> </span><br><span class="line"><span class="number">28</span> <span class="number">32</span> <span class="number">37</span> <span class="number">41</span> <span class="number">7</span> <span class="number">13</span> <span class="number">20</span> <span class="number">26</span> <span class="number">34</span> <span class="number">40</span> <span class="number">8</span> <span class="number">17</span> <span class="number">29</span> <span class="number">38</span> <span class="number">11</span> <span class="number">25</span> <span class="number">2</span> <span class="number">22</span> <span class="number">4</span> <span class="number">35</span> <span class="number">16</span> </span><br><span class="line">存活的玩家是:<span class="number">31</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
