<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试分类和标签</title>
      <link href="/2019/08/23/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/08/23/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在hexo博客插入图片</title>
      <link href="/2019/08/23/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2019/08/23/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-在hexo根目录安装第三方插件"><a href="#1-在hexo根目录安装第三方插件" class="headerlink" title="1. 在hexo根目录安装第三方插件"></a>1. 在hexo根目录安装第三方插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="2-修改-config-xml文件的内容"><a href="#2-修改-config-xml文件的内容" class="headerlink" title="2. 修改_config.xml文件的内容"></a>2. 修改_config.xml文件的内容</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-插入md图片"><a href="#3-插入md图片" class="headerlink" title="3. 插入md图片"></a>3. 插入md图片</h2><h3 id="3-1-新建一个md文件"><a href="#3-1-新建一个md文件" class="headerlink" title="3.1 新建一个md文件"></a>3.1 新建一个md文件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n "<span class="built_in">title</span>"</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/如何在hexo博客插入图片/%E6%96%B0%E5%BB%BAmd.jpg" alt="新建md"></p><h3 id="3-2-把待图片放入-posts文件夹下与title-md同名的文件夹title"><a href="#3-2-把待图片放入-posts文件夹下与title-md同名的文件夹title" class="headerlink" title="3.2 把待图片放入_posts文件夹下与title.md同名的文件夹title"></a>3.2 把待图片放入_posts文件夹下与title.md同名的文件夹title</h3><p><img src="/2019/08/23/如何在hexo博客插入图片/%E6%94%BE%E5%85%A5%E5%9B%BE%E7%89%87.jpg" alt="新建md"></p><h3 id="3-3-在title-md中引入图片"><a href="#3-3-在title-md中引入图片" class="headerlink" title="3.3 在title.md中引入图片"></a>3.3 在title.md中引入图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">爱宠大机密</span>](<span class="link">title/46ro0003sn14n066p757.jpg</span>)</span><br></pre></td></tr></table></figure><p><img src="/2019/08/23/如何在hexo博客插入图片/%E5%9C%A8md%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87.png" alt="在md中引入图片"></p><h3 id="3-4-编译并运行"><a href="#3-4-编译并运行" class="headerlink" title="3.4 编译并运行"></a>3.4 编译并运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="3-5-成功"><a href="#3-5-成功" class="headerlink" title="3.5 成功"></a>3.5 成功</h3><p><img src="/2019/08/23/如何在hexo博客插入图片/%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.jpg" alt="上传成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 插入图片的步骤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学真的可以救命之约瑟夫问题</title>
      <link href="/2019/08/23/%E6%95%B0%E5%AD%A6%E7%9C%9F%E7%9A%84%E5%8F%AF%E4%BB%A5%E6%95%91%E5%91%BD%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/23/%E6%95%B0%E5%AD%A6%E7%9C%9F%E7%9A%84%E5%8F%AF%E4%BB%A5%E6%95%91%E5%91%BD%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="数学真的可以救命"><a href="#数学真的可以救命" class="headerlink" title="数学真的可以救命"></a>数学真的可以救命</h1><h2 id="今天我们要解决的是约瑟夫问题-首先我们先来了解链表到底是什么东东"><a href="#今天我们要解决的是约瑟夫问题-首先我们先来了解链表到底是什么东东" class="headerlink" title="今天我们要解决的是约瑟夫问题, 首先我们先来了解链表到底是什么东东"></a>今天我们要解决的是约瑟夫问题, 首先我们先来了解链表到底是什么东东</h2><h3 id="1-链表的基本概念"><a href="#1-链表的基本概念" class="headerlink" title="1 .链表的基本概念"></a>1 .链表的基本概念</h3><h4 id="1-1-什么是链表"><a href="#1-1-什么是链表" class="headerlink" title="1.1 什么是链表 ?"></a>1.1 什么是链表 ?</h4><p>如下图所示  : </p><p><img src="/2019/08/23/数学真的可以救命之约瑟夫问题/%E5%8D%95%E5%8F%8C%E9%93%BE%E8%A1%A8.png" alt="“单向链表”"></p><a id="more"></a><p><strong>SingleLinkedList代表单向链表</strong> , 每一个结点含有 : </p><ol><li>data域 : 用于保存数据</li><li>next域 : 用于保存指向下一个结点的指针</li></ol><p><strong>DoubleLinkedList代表双向链表</strong> , 每一个结点含有 : </p><ol><li>prev域 : 用于保存指向前一个结点的指针</li><li>data域 : 用于保存数据</li><li>next域 : 用于保存后一个数据的指针</li></ol><h5 id="对于头结点的说明"><a href="#对于头结点的说明" class="headerlink" title="对于头结点的说明 :"></a>对于头结点的说明 :</h5><p>头结点表示一个单链表第一个含有有效数据结点之前的结点, 它一般不保存数据, 用作链表的前驱 </p><p><strong>使用头结点和不使用头结点的不同 :</strong> </p><p>​    使用头结点方便在第一个位置进行插入, 删除操作时和其它位置的插入删除操作的代码保持一致性 , 因为带上头结点之后 , 头指针永远不需要移动 , 而不带上头结点时 , 在第一个位置进行插入或删除操作时, 头指针需要移动 , 较为麻烦 , 有兴趣的读者可以尝试一下 , 这里不再详述……</p><h4 id="1-3-单向循环链表-不带头结点"><a href="#1-3-单向循环链表-不带头结点" class="headerlink" title="1.3 单向循环链表(不带头结点)"></a>1.3 单向循环链表(不带头结点)</h4><p><img src="/2019/08/23/数学真的可以救命之约瑟夫问题/1562764751561.png" alt="1562764751561"></p><p>单向循环链表就是单向链表的升级版 , 尾结点的指针不再指向空 , 而是指向<strong>第一个结点</strong></p><h2 id="约瑟夫问题-也称”丢手帕问题”"><a href="#约瑟夫问题-也称”丢手帕问题”" class="headerlink" title="约瑟夫问题(也称”丢手帕问题”)"></a>约瑟夫问题(也称”丢手帕问题”)</h2><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1562775796416&di=a7bc151dd485871bda13d88f36f0c95e&imgtype=0&src=http%3A%2F%2Ftxt15.book118.com%2F2016%2F1231%2Fbook78535%2F78534873.jpg" style="width:500px;height:300px"><h3 id="约瑟夫问题起源"><a href="#约瑟夫问题起源" class="headerlink" title="约瑟夫问题起源 :"></a>约瑟夫问题起源 :</h3><p>在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。<strong>然而Josephus 和他的朋友并不想遵从</strong>。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。</p><p>为什么约瑟夫一开始就知道站在16和31就一定能躲过自杀呢?<strong>这就是数学的魅力所在, 真香~</strong></p><p><img src="http://www.cplusplus.me/wp-content/uploads/2014/08/ysf.png" alt="点击查看源网页"></p><p><strong>外圈表示第几个自杀, 内圈表示每个人的序号</strong></p><h3 id="单向循环链表解决约瑟夫问题"><a href="#单向循环链表解决约瑟夫问题" class="headerlink" title="单向循环链表解决约瑟夫问题"></a>单向循环链表解决约瑟夫问题</h3><h4 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述 :"></a>问题重述 :</h4><p>设有n个人围成一圈 , 编号从1到n , 约定从编号为k(1 &lt;= k &lt;= n)的人从1开始报数 , 数到 m 的那个人被淘汰 , 接着下一个人重新从1开始报数 , 数到 m 再淘汰一人 , 如此反复 , 直至剩下最后一个人为止</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路 :"></a>思路 :</h4><p>① 为什么使用单向循环链表 ? </p><p>我们可以知道约瑟夫问题是一个不断循环而且数据不断减少的过程 , 使用单向循环链表可以很方便地对数据进行删除 , 而且遍历链表方便</p><p>② 理清过程 , 首先一个带有n个结点地单循环链表 , 从第k个人开始从1报数 , 那么首先需要将头指针指向第k个人 , 辅助删除指针指向第(k-1)个人 , 定义辅助删除指针的意义是为了方便当第k个人淘汰时 , 可以很方便的将第(k-1)的next指针指向第(k+1)个人, 当人数剩下一个人时 , 则认为这场游戏已经结束了 , 最后剩下的那个人就是胜利者</p><p><img src="/2019/08/23/数学真的可以救命之约瑟夫问题/1562767630166.png" alt="1562767630166"></p><p><img src="/2019/08/23/数学真的可以救命之约瑟夫问题/1562767901463.png" alt="1562767901463"></p><h3 id="代码实现-JAVA版"><a href="#代码实现-JAVA版" class="headerlink" title="代码实现(JAVA版) :"></a>代码实现(JAVA版) :</h3><h4 id="1-定义小孩的结点"><a href="#1-定义小孩的结点" class="headerlink" title="1.定义小孩的结点"></a>1.定义小孩的结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Child结点, 每一个Child对象就是一个结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line"><span class="comment">//编号</span></span><br><span class="line"><span class="keyword">public</span> Integer no;</span><br><span class="line"><span class="comment">//指向下一个结点</span></span><br><span class="line"><span class="keyword">public</span> Child next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(Integer no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(Integer no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [no="</span> + no + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义单向循环链表"><a href="#2-定义单向循环链表" class="headerlink" title="2.定义单向循环链表"></a>2.定义单向循环链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SingleLinkedList来管理我们的Child结点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleLinkedList</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个结点</span></span><br><span class="line"><span class="keyword">private</span> Child first = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//当前的最后一个结点</span></span><br><span class="line"><span class="keyword">private</span> Child rear = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加结点到单向链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Child child)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断当前链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">first = child;</span><br><span class="line">child.next = first;</span><br><span class="line">rear = child;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">rear.next = child;</span><br><span class="line">child.next = first;</span><br><span class="line">rear = child;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m 数到几出圈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 共有n个孩子玩游戏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 从第k个孩子开始报数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//开始游戏, 小孩出圈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//使first指针和deleteNode指针指向第k个孩子和(k-1)个孩子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==k)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">first = first.next;</span><br><span class="line">rear = rear.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助删除指针, 需要删除元素时使用, 所以初始化时应该指向最后一个结点</span></span><br><span class="line"><span class="comment">//因为一开始第一个结点开始报数, 有可能报的是1, num也为1, 则首结点被淘汰</span></span><br><span class="line">Child deleteNode = rear;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"你自己一个人玩, 你逃不掉了, 人数过少,无法开始游戏"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"被淘汰的小孩的编号为:"</span>);</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//只剩下一个人了</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">                System.out.println(<span class="string">"存活的玩家是:"</span>+first.getNo());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否数到m, 如果是则删除该结点</span></span><br><span class="line"><span class="keyword">if</span>(count == m)&#123;</span><br><span class="line">System.out.print(deleteNode.next.getNo()+<span class="string">" "</span>);</span><br><span class="line">first = first.next;</span><br><span class="line">deleteNode.next = first;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//人数减少</span></span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//头指针与辅助删除指针都往后移一位</span></span><br><span class="line">deleteNode = deleteNode.next;</span><br><span class="line">first = first.next;</span><br><span class="line">count++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-代码运行"><a href="#3-代码运行" class="headerlink" title="3. 代码运行"></a>3. 代码运行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosephuSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">CircleLinkedList circleLinkedList = <span class="keyword">new</span> CircleLinkedList();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">41</span>;</span><br><span class="line">        <span class="comment">//生成小孩</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">Child child = <span class="keyword">new</span> Child(i);</span><br><span class="line">circleLinkedList.add(child);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// k=1, m=3, n=41</span></span><br><span class="line">circleLinkedList.play(<span class="number">1</span>, <span class="number">3</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">被淘汰的小孩的编号为:</span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">9</span> <span class="number">12</span> <span class="number">15</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span> <span class="number">27</span> <span class="number">30</span> <span class="number">33</span> <span class="number">36</span> <span class="number">39</span> <span class="number">1</span> <span class="number">5</span> <span class="number">10</span> <span class="number">14</span> <span class="number">19</span> <span class="number">23</span> </span><br><span class="line"><span class="number">28</span> <span class="number">32</span> <span class="number">37</span> <span class="number">41</span> <span class="number">7</span> <span class="number">13</span> <span class="number">20</span> <span class="number">26</span> <span class="number">34</span> <span class="number">40</span> <span class="number">8</span> <span class="number">17</span> <span class="number">29</span> <span class="number">38</span> <span class="number">11</span> <span class="number">25</span> <span class="number">2</span> <span class="number">22</span> <span class="number">4</span> <span class="number">35</span> <span class="number">16</span> </span><br><span class="line">存活的玩家是:<span class="number">31</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
